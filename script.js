// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∞–π—Ç–∞
const serverStatus = 0; // 1 - –∞–∫—Ç–∏–≤–Ω–æ, 0 - –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ
const serverIP = "purplenet.aternos.me:24070";
const teamCreationDate = new Date("2025-02-20"); // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
const admins = ["quelli", "–ù–∏–æ–Ω–∞"];
const membersCount = 12;

const birthdays = [
  { name: "@quellaw", date: "2000-09-27" },
  { name: "@Sans_Muslim", date: "2000-10-01" },
  { name: "@PoMidoR_ph", date: "2000-11-19" },
  { name: "@Bloodydemon90", date: "2000-08-03" },
  { name: "@zavnes", date: "2000-06-13" },
  { name: "–ë–µ–ª—è—à", date: "2000-10-01" },
  { name: "@fracturedbody", date: "2000-02-29" },
];

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
const serverStatusElement = document.getElementById("server-status");
const serverIPElement = document.getElementById("server-ip");

if (serverStatus === 1) {
  serverStatusElement.textContent = "–ê–∫—Ç–∏–≤–Ω–æ";
  serverStatusElement.classList.add("active");
} else {
  serverStatusElement.textContent = "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ";
}

serverIPElement.textContent = serverIP;

// –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
let congratulationShown = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª–æ –ª–∏ –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ

function updateBirthdays() {
  const now = new Date();
  const upcomingBirthdays = birthdays
    .map(b => {
      const birthdayDate = new Date(b.date);
      birthdayDate.setFullYear(now.getFullYear());
      if (birthdayDate < now) {
        birthdayDate.setFullYear(now.getFullYear() + 1);
      }
      const diff = (birthdayDate - now) / 1000; // –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      return { ...b, date: birthdayDate, diff };
    })
    .filter(b => b.diff >= 0)
    .sort((a, b) => a.diff - b.diff);

  const mainTimer = document.getElementById("main-timer");
  const secondaryTimers = document.getElementById("secondary-timers");
  const birthdaySection = document.getElementById("birthdays");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
  const todayBirthdays = birthdays.filter(b => {
    const birthdayDate = new Date(b.date);
    return (
      birthdayDate.getDate() === now.getDate() &&
      birthdayDate.getMonth() === now.getMonth()
    );
  });

  if (todayBirthdays.length > 0 && !congratulationShown) {
    // –ü—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è —Ç–µ–º–∞
    birthdaySection.style.backgroundColor = "#4a148c"; // –¢–µ–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    birthdaySection.style.color = "#fff";

    // –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
    const congratulation = document.createElement("div");
    congratulation.className = "congratulation";
    congratulation.innerHTML = `
      <h2>üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É:</h2>
      <ul>
        ${todayBirthdays.map(b => `<li>${b.name}</li>`).join("")}
      </ul>
    `;
    birthdaySection.prepend(congratulation);

    congratulationShown = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ
  } else if (todayBirthdays.length === 0) {
    // –û–±—ã—á–Ω–∞—è —Ç–µ–º–∞
    birthdaySection.style.backgroundColor = "#000";
    birthdaySection.style.color = "#fff";
    const congratulation = document.querySelector(".congratulation");
    if (congratulation) {
      congratulation.remove();
    }
    congratulationShown = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –µ—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—à–µ–ª
  }

  if (upcomingBirthdays.length > 0) {
    const nextBirthday = upcomingBirthdays[0];
    const days = Math.floor(nextBirthday.diff / (60 * 60 * 24));
    const hours = Math.floor((nextBirthday.diff % (60 * 60 * 24)) / (60 * 60));
    const minutes = Math.floor((nextBirthday.diff % (60 * 60)) / 60);
    const seconds = Math.floor(nextBirthday.diff % 60);

    mainTimer.innerHTML = `
      <div class="nickname">${nextBirthday.name}</div>
      <div class="timer">${String(days).padStart(2, '0')}:${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}</div>
    `;
  }

  secondaryTimers.innerHTML = upcomingBirthdays
    .slice(1)
    .map(b => {
      const days = Math.floor(b.diff / (60 * 60 * 24));
      const hours = Math.floor((b.diff % (60 * 60 * 24)) / (60 * 60));
      const minutes = Math.floor((b.diff % (60 * 60)) / 60);
      const seconds = Math.floor(b.diff % 60);

      return `
        <div class="birthday-card">
          <div class="nickname">${b.name}</div>
          <div class="timer">${String(days).padStart(2, '0')}:${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}</div>
        </div>
      `;
    })
    .join("");
}

setInterval(updateBirthdays, 1000);
updateBirthdays(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ

// –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
  const now = new Date();
  const diff = now - teamCreationDate;
  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((diff % (1000 * 60)) / 1000);

  document.getElementById("team-age").textContent = `${days} –¥–Ω–µ–π, ${hours} —á–∞—Å–æ–≤, ${minutes} –º–∏–Ω—É—Ç, ${seconds} —Å–µ–∫—É–Ω–¥`;
  document.getElementById("admins-list").textContent = admins.join(", ");
  document.getElementById("members-count").textContent = membersCount;
}

setInterval(updateStats, 1000);
updateStats(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ

// –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
function showTab(tabName) {
  document.querySelectorAll(".tab-content").forEach(tab => {
    tab.classList.remove("active");
  });
  document.querySelectorAll(".tab-button").forEach(button => {
    button.classList.remove("active");
  });
  document.getElementById(tabName).classList.add("active");
  document.querySelector(`button[onclick="showTab('${tabName}')"]`).classList.add("active");
}

// –õ–æ–≥–∏–∫–∞ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
function downloadMod(filename) {
  const link = document.createElement("a");
  link.href = filename;
  link.download = filename;
  link.click();
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
document.querySelectorAll(".nav-link").forEach(link => {
  link.addEventListener("click", function (e) {
    e.preventDefault();
    document.querySelectorAll("section").forEach(section => {
      section.classList.remove("active");
    });
    document.querySelector(this.getAttribute("href")).classList.add("active");
  });
});

// –í—ã–¥–≤–∏–≥–∞—é—â–µ–µ—Å—è –º–µ–Ω—é
const menuToggle = document.getElementById("menu-toggle");
const sidebar = document.getElementById("sidebar");
const mainContent = document.querySelector("main");

menuToggle.addEventListener("click", () => {
  sidebar.classList.toggle("active");
  mainContent.classList.toggle("shifted");
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ –æ–±–ª–∞—Å—Ç–∏
document.addEventListener("click", (e) => {
  if (!sidebar.contains(e.target) && !menuToggle.contains(e.target)) {
    sidebar.classList.remove("active");
    mainContent.classList.remove("shifted");
  }
});